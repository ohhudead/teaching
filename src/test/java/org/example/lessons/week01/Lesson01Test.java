package org.example.lessons.week01;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –£—Ä–æ–∫ 1
 * 
 * –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã JUnit.
 * –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
 * 
 * –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤ IntelliJ IDEA:
 * 1. –ö–ª–∏–∫–Ω–∏ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –∫–ª–∞—Å—Å
 * 2. –í—ã–±–µ—Ä–∏ "Run 'Lesson01Test'"
 * 3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π Ctrl+Shift+F10
 */
public class Lesson01Test {
    
    @Test
    void testBasicMath() {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        int a = 5;
        int b = 3;
        
        assertEquals(8, a + b, "–°–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
        assertEquals(2, a - b, "–í—ã—á–∏—Ç–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
        assertEquals(15, a * b, "–£–º–Ω–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
        assertEquals(1, a / b, "–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
        assertEquals(2, a % b, "–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º");
    }
    
    @Test
    void testStringOperations() {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
        String greeting = "–ü—Ä–∏–≤–µ—Ç";
        String name = "Java";
        String fullGreeting = greeting + ", " + name + "!";
        
        assertEquals("–ü—Ä–∏–≤–µ—Ç, Java!", fullGreeting, "–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å");
        assertTrue(fullGreeting.contains("Java"), "–°—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'Java'");
        assertEquals(13, fullGreeting.length(), "–î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 13 —Å–∏–º–≤–æ–ª–æ–≤");
    }
    
    @Test
    void testBooleanLogic() {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        boolean isRaining = true;
        boolean hasUmbrella = false;
        
        assertFalse(isRaining && hasUmbrella, "–ò: –¥–æ–∂–¥—å –ò –∑–æ–Ω—Ç = false");
        assertTrue(isRaining || hasUmbrella, "–ò–õ–ò: –¥–æ–∂–¥—å –ò–õ–ò –∑–æ–Ω—Ç = true");
        assertFalse(!isRaining, "–ù–ï: –ù–ï –¥–æ–∂–¥—å = false");
    }
    
    @Test
    void testTypeConversion() {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
        int intValue = 42;
        double doubleValue = intValue; // –ù–µ—è–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        
        assertEquals(42.0, doubleValue, "int –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å—Å—è –≤ double");
        
        String stringValue = String.valueOf(intValue);
        assertEquals("42", stringValue, "int –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å—Å—è –≤ String");
    }
    
    @Test
    void testIncrementOperators() {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
        int counter = 5;
        
        assertEquals(5, counter++, "–ü–æ—Å—Ç—Ñ–∏–∫—Å–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ");
        assertEquals(6, counter, "–ü–æ—Å–ª–µ –ø–æ—Å—Ç—Ñ–∏–∫—Å–Ω–æ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è");
        
        assertEquals(7, ++counter, "–ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ");
        assertEquals(7, counter, "–ü–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–Ω–æ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º");
    }
}

/*
üß™ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –í JAVA:

–¢–µ—Å—Ç—ã - —ç—Ç–æ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—Ä—É–≥–æ–π –∫–æ–¥!

‚úÖ @Test - –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
‚úÖ assertEquals(expected, actual) - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
‚úÖ assertTrue/assertFalse - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è  
‚úÖ assertNotNull - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–±—ä–µ–∫—Ç –Ω–µ null

üî• –ó–ê–ß–ï–ú –ù–£–ñ–ù–´ –¢–ï–°–¢–´:
- –ü—Ä–æ–≤–µ—Ä—è—é—Ç, —á—Ç–æ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
- –ü–æ–º–æ–≥–∞—é—Ç –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫–∏ —Ä–∞–Ω–æ
- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–¥–∞
- –î–∞—é—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö

üí° –í –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ô –†–ê–ó–†–ê–ë–û–¢–ö–ï:
- –¢–µ—Å—Ç—ã –ø–∏—à—É—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
- –¢–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –ë–µ–∑ —Ç–µ—Å—Ç–æ–≤ –∫–æ–¥ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–Ω

–ù–µ –≤–æ–ª–Ω—É–π—Å—è, –µ—Å–ª–∏ –ø–æ–∫–∞ –Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ - 
—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —É—Ä–æ–∫! üöÄ
*/ 