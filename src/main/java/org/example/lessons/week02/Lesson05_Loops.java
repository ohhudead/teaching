package org.example.lessons.week02;

/**
 * üîÑ –ó–ê–ù–Ø–¢–ò–ï 5: –¶–ò–ö–õ–´ (for/while/do-while)
 * 
 * –¶–∏–∫–ª—ã - —ç—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–æ–¥–∞.
 * –í–º–µ—Å—Ç–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∫–æ–¥–∞ –º–Ω–æ–≥–æ —Ä–∞–∑,
 * –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏–∫–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á.
 * 
 * üí° –ñ–∞—Ä–≥–æ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
 * - Loop (–¶–∏–∫–ª) - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–æ–¥–∞
 * - Iteration (–ò—Ç–µ—Ä–∞—Ü–∏—è) - –æ–¥–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ª–∞ —Ü–∏–∫–ª–∞
 * - Iterator (–ò—Ç–µ—Ä–∞—Ç–æ—Ä) - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π
 * - Infinite Loop (–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª) - —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
 * - Break/Continue - –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–æ–º
 */
public class Lesson05_Loops {
    
    public static void main(String[] args) {
        System.out.println("üîÑ –ò–ó–£–ß–ê–ï–ú –¶–ò–ö–õ–´\n");
        
        // üî¢ 1. –¶–ò–ö–õ FOR
        forLoop();
        
        // ‚è≥ 2. –¶–ò–ö–õ WHILE
        whileLoop();
        
        // üîÑ 3. –¶–ò–ö–õ DO-WHILE
        doWhileLoop();
        
        // üöÄ 4. ENHANCED FOR (foreach)
        learnEnhancedFor();
        
        // ‚ö° 5. –£–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ò–ö–õ–ê–ú–ò
        learnLoopControl();
        
        // üéØ 6. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ù–ò–Ø
        practice();
    }
    
    /**
     * üî¢ –¶–ò–ö–õ FOR
     * 
     * –ò–¥–µ–∞–ª–µ–Ω –∫–æ–≥–¥–∞ –∑–Ω–∞–µ—à—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –∑–∞—Ä–∞–Ω–µ–µ.
     */
    private static void forLoop() {
        System.out.println("üî¢ For —Ü–∏–∫–ª:");
        
        // –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª
        for (int i = 1; i <= 5; i++) {
            System.out.print(i + " ");
        }
        System.out.println();
        
        // –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è
        for (int i = 1; i <= 5; i++) {
            System.out.println("2 √ó " + i + " = " + (2 * i));
        }
        
        System.out.println();
    }
    
    /**
     * ‚è≥ –¶–ò–ö–õ WHILE
     * 
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π.
     */
    private static void whileLoop() {
        System.out.println("‚è≥ While —Ü–∏–∫–ª:");
        
        int count = 1;
        while (count <= 5) {
            System.out.print(count + " ");
            count++;
        }
        System.out.println();
        
        // –°—É–º–º–∞ —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞
        int num = 123;
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        System.out.println("–°—É–º–º–∞ —Ü–∏—Ñ—Ä: " + sum);
        
        System.out.println();
    }
    
    /**
     * üîÑ –¶–ò–ö–õ DO-WHILE
     * 
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Ä–∞–∑, –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –≤ –∫–æ–Ω—Ü–µ.
     */
    private static void doWhileLoop() {
        System.out.println("üîÑ Do-while —Ü–∏–∫–ª:");
        
        int i = 1;
        do {
            System.out.print(i + " ");
            i++;
        } while (i <= 5);
        System.out.println();
        
        System.out.println();
    }
    
    /**
     * üöÄ ENHANCED FOR (foreach)
     * 
     * –£–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–æ–≤ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π.
     */
    private static void learnEnhancedFor() {
        System.out.println("üöÄ Enhanced for (foreach):");
        
        // –ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª
        int[] numbers = {10, 20, 30, 40, 50};
        
        System.out.print("–≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞: ");
        for (int num : numbers) {
            System.out.print(num + " ");
        }
        System.out.println();
        
        // –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
        String[] fruits = {"—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–∞–ø–µ–ª—å—Å–∏–Ω", "–∫–∏–≤–∏"};
        
        System.out.println("–§—Ä—É–∫—Ç—ã:");
        for (String fruit : fruits) {
            System.out.println("üçé " + fruit);
        }
        
        // –°—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞
        int total = 0;
        for (int num : numbers) {
            total += num;
        }
        System.out.println("–°—É–º–º–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª: " + total);
        
        // –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        int max = numbers[0];
        for (int num : numbers) {
            if (num > max) {
                max = num;
            }
        }
        System.out.println("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: " + max);
        
        System.out.println();
    }
    
    /**
     * ‚ö° –£–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ò–ö–õ–ê–ú–ò
     * 
     * break –∏ continue –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
     */
    private static void learnLoopControl() {
        System.out.println("‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–∞–º–∏:");
        
        // break - –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ü–∏–∫–ª
        System.out.print("–ü–æ–∏—Å–∫ —á–∏—Å–ª–∞ 7: ");
        for (int i = 1; i <= 10; i++) {
            if (i == 7) {
                System.out.print("–ù–∞–π–¥–µ–Ω–æ " + i + "!");
                break;  // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            }
            System.out.print(i + " ");
        }
        System.out.println();
        
        // continue - –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
        System.out.print("–¢–æ–ª—å–∫–æ –Ω–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞: ");
        for (int i = 1; i <= 10; i++) {
            if (i % 2 == 0) {
                continue;  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
            }
            System.out.print(i + " ");
        }
        System.out.println();
        
        // –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã —Å break
        System.out.println("–ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ —É–º–Ω–æ–∂–µ–Ω–∏—è:");
        boolean found = false;
        
        for (int i = 1; i <= 10 && !found; i++) {
            for (int j = 1; j <= 10; j++) {
                if (i * j == 24) {
                    System.out.printf("–ù–∞–π–¥–µ–Ω–æ: %d √ó %d = %d%n", i, j, i * j);
                    found = true;
                    break;
                }
            }
        }
        
        // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ continue
        System.out.println("–ê–Ω–∞–ª–∏–∑ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 20:");
        for (int i = 1; i <= 20; i++) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∏—Å–ª–∞, –¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞ 3
            if (i % 3 == 0) {
                continue;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
            boolean isPrime = true;
            for (int j = 2; j <= Math.sqrt(i); j++) {
                if (i % j == 0) {
                    isPrime = false;
                    break;
                }
            }
            
            if (isPrime && i > 1) {
                System.out.print(i + " ");
            }
        }
        System.out.println("‚Üê –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞");
        
        System.out.println();
    }
    
    /**
     * üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ù–ò–Ø
     * 
     * –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∫–æ–¥ –∏ –≤—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏—è!
     */
    private static void practice() {
        System.out.println("üéØ –ü—Ä–∞–∫—Ç–∏–∫–∞:");
        
        // –ó–ê–î–ê–ù–ò–ï 1: –§–∞–∫—Ç–æ—Ä–∏–∞–ª
        /*
        int n = 5;
        long factorial = 1;
        for (int i = 1; i <= n; i++) {
            factorial *= i;
        }
        System.out.println(n + "! = " + factorial);
        */
        
        // –ó–ê–î–ê–ù–ò–ï 2: –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
        /*
        System.out.print("–ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –¥–æ 20: ");
        for (int num = 2; num <= 20; num++) {
            boolean isPrime = true;
            for (int i = 2; i < num; i++) {
                if (num % i == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) {
                System.out.print(num + " ");
            }
        }
        System.out.println();
        */
        
        // –ó–ê–î–ê–ù–ò–ï 3: –§–∏–±–æ–Ω–∞—á—á–∏
        /*
        int a = 0, b = 1;
        System.out.print("–§–∏–±–æ–Ω–∞—á—á–∏: " + a + " " + b + " ");
        for (int i = 0; i < 8; i++) {
            int next = a + b;
            System.out.print(next + " ");
            a = b;
            b = next;
        }
        System.out.println();
        */
    }
}

/*
üéì –ß–¢–û –¢–´ –ò–ó–£–ß–ò–õ:

‚úÖ For —Ü–∏–∫–ª - –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
‚úÖ While —Ü–∏–∫–ª - —É—Å–ª–æ–≤–∏–µ –≤ –Ω–∞—á–∞–ª–µ
‚úÖ Do-while —Ü–∏–∫–ª - —É—Å–ª–æ–≤–∏–µ –≤ –∫–æ–Ω—Ü–µ
‚úÖ break –∏ continue

üíæ –°–æ—Ö—Ä–∞–Ω–∏:
git add .
git commit -m "–£—Ä–æ–∫ 5: –¶–∏–∫–ª—ã"
*/ 