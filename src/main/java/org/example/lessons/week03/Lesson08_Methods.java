package org.example.lessons.week03;

/**
 * ‚öôÔ∏è –ó–ê–ù–Ø–¢–ò–ï 8: –ú–ï–¢–û–î–´ –í –î–ï–¢–ê–õ–Ø–•
 * 
 * –ú–µ—Ç–æ–¥—ã - —ç—Ç–æ "–≥–ª–∞–≥–æ–ª—ã" –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –û–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã –º–æ–≥—É—Ç –î–ï–õ–ê–¢–¨.
 * –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ —Å —Å—É–ø–µ—Ä—Å–∏–ª–∞–º–∏! –û–Ω–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞ –∏ –º–µ–∂–¥—É —Å–æ–±–æ–π.
 * 
 * üí° –ñ–∞—Ä–≥–æ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
 * - Method signature (–°–∏–≥–Ω–∞—Ç—É—Ä–∞ –º–µ—Ç–æ–¥–∞) - –∏–º—è + –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * - Parameters (–ü–∞—Ä–∞–º–µ—Ç—Ä—ã) - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∞
 * - Arguments (–ê—Ä–≥—É–º–µ–Ω—Ç—ã) - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 * - Return type (–¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è) - —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–¥–∞–µ—Ç
 * - Overloading (–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞) - –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ —Å –æ–¥–Ω–∏–º –∏–º–µ–Ω–µ–º
 * - Void (–í–æ–π–¥) - –º–µ—Ç–æ–¥ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
 * - Static (–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π) - –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª–∞—Å—Å—É, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç—É
 */
public class Lesson08_Methods {
    
    public static void main(String[] args) {
        System.out.println("‚öôÔ∏è –ò–ó–£–ß–ê–ï–ú –ú–ï–¢–û–î–´ –í –î–ï–¢–ê–õ–Ø–•\n");
        
        learnBasicMethods();
        learnParametersAndReturnValues();
        learnMethodOverloading();
        learnStaticMethods();
        practiceAdvancedMethods();
    }
    
    /**
     * üîß –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´
     */
    private static void learnBasicMethods() {
        System.out.println("üîß –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã:");
        
        Calculator calc = new Calculator();
        
        // –ú–µ—Ç–æ–¥—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        calc.displayWelcome();
        calc.showFeatures();
        
        // –ú–µ—Ç–æ–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        calc.setOwner("–ê–ª–µ–∫—Å–µ–π");
        calc.displayOwner();
        
        System.out.println();
    }
    
    private static void learnParametersAndReturnValues() {
        System.out.println("üì•üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:");
        
        MathUtils math = new MathUtils();
        
        // –ú–µ—Ç–æ–¥—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        int sum = math.add(15, 25);
        double average = math.calculateAverage(10, 20, 30);
        boolean isEven = math.isEven(42);
        String result = math.compareNumbers(15, 25);
        
        System.out.println("–°—É–º–º–∞: " + sum);
        System.out.println("–°—Ä–µ–¥–Ω–µ–µ: " + average);
        System.out.println("42 —á–µ—Ç–Ω–æ–µ? " + isEven);
        System.out.println("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: " + result);
        
        // –ú–µ—Ç–æ–¥—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        int max = math.findMax(45, 67, 23, 89, 12);
        System.out.println("–ú–∞–∫—Å–∏–º—É–º –∏–∑ —á–∏—Å–µ–ª: " + max);
        
        double power = math.power(2, 8);
        System.out.println("2 –≤ —Å—Ç–µ–ø–µ–Ω–∏ 8 = " + power);
        
        System.out.println();
    }
    
    private static void learnMethodOverloading() {
        System.out.println("üîÑ –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–¥–æ–≤:");
        
        Printer printer = new Printer();
        
        // –û–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, –Ω–æ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        printer.print("–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç");
        printer.print("–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", true);
        printer.print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR");
        printer.print(42);
        printer.print(3.14159);
        printer.print(new String[]{"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞", "–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞", "–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞"});
        
        System.out.println();
    }
    
    private static void learnStaticMethods() {
        System.out.println("‚ö° –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã:");
        
        // –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        String formatted = StringUtils.formatName("  –∏–≤–∞–Ω  ", "  –ø–µ—Ç—Ä–æ–≤  ");
        System.out.println("–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è: " + formatted);
        
        boolean isValid = StringUtils.isValidEmail("user@example.com");
        System.out.println("Email –≤–∞–ª–∏–¥–Ω—ã–π? " + isValid);
        
        String password = StringUtils.generatePassword(12);
        System.out.println("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: " + password);
        
        // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Ç–∏–ª–∏—Ç—ã
        int factorial = MathUtils.calculateFactorial(5);
        System.out.println("5! = " + factorial);
        
        boolean isPrime = MathUtils.isPrime(17);
        System.out.println("17 –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ? " + isPrime);
        
        System.out.println();
    }
    
    private static void practiceAdvancedMethods() {
        System.out.println("üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å –º–µ—Ç–æ–¥–∞–º–∏:");
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        GameCharacter hero = new GameCharacter();
        hero.setName("–ê—Ä–∞–≥–æ—Ä–Ω");
        hero.setLevel(1);
        hero.setHealth(100);
        hero.setMana(50);
        
        hero.displayStatus();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        hero.attack("–û—Ä–∫");
        hero.castSpell("–ò—Å—Ü–µ–ª–µ–Ω–∏–µ", 20);
        hero.rest();
        hero.levelUp();
        
        hero.displayStatus();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (hero.canFight()) {
            System.out.println(hero.getName() + " –≥–æ—Ç–æ–≤ –∫ –±–æ—é!");
        }
        
        System.out.println();
    }
}

/**
 * üßÆ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã
 */
class Calculator {
    private String owner;
    
    // –ú–µ—Ç–æ–¥ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    void displayWelcome() {
        System.out.println("üßÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä 3000!");
    }
    
    void showFeatures() {
        System.out.println("üìã –§—É–Ω–∫—Ü–∏–∏: —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ, –¥–µ–ª–µ–Ω–∏–µ");
    }
    
    // –ú–µ—Ç–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –Ω–æ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    void setOwner(String name) {
        this.owner = name;
        System.out.println("‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + name);
    }
    
    void displayOwner() {
        if (owner != null) {
            System.out.println("üë§ –í–ª–∞–¥–µ–ª–µ—Ü –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: " + owner);
        } else {
            System.out.println("‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }
    }
}

/**
 * üî¢ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –£–¢–ò–õ–ò–¢–´
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 */
class MathUtils {
    
    // –ú–µ—Ç–æ–¥ —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int
    int add(int a, int b) {
        int result = a + b;
        System.out.printf("üî¢ %d + %d = %d%n", a, b, result);
        return result;
    }
    
    // –ú–µ—Ç–æ–¥ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç double
    double calculateAverage(int... numbers) {
        if (numbers.length == 0) return 0;
        
        int sum = 0;
        for (int num : numbers) {
            sum += num;
        }
        return (double) sum / numbers.length;
    }
    
    // –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç boolean
    boolean isEven(int number) {
        return number % 2 == 0;
    }
    
    // –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç String
    String compareNumbers(int a, int b) {
        if (a > b) return a + " –±–æ–ª—å—à–µ " + b;
        if (a < b) return a + " –º–µ–Ω—å—à–µ " + b;
        return a + " —Ä–∞–≤–Ω–æ " + b;
    }
    
    // –ú–µ—Ç–æ–¥ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    int findMax(int... numbers) {
        if (numbers.length == 0) return 0;
        
        int max = numbers[0];
        for (int num : numbers) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }
    
    // –ú–µ—Ç–æ–¥ —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏
    double power(double base, int exponent) {
        double result = 1;
        for (int i = 0; i < exponent; i++) {
            result *= base;
        }
        return result;
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã (–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫–ª–∞—Å—Å—É, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç—É)
    static int calculateFactorial(int n) {
        if (n <= 1) return 1;
        
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }
    
    static boolean isPrime(int number) {
        if (number <= 1) return false;
        if (number <= 3) return true;
        if (number % 2 == 0 || number % 3 == 0) return false;
        
        for (int i = 5; i * i <= number; i += 6) {
            if (number % i == 0 || number % (i + 2) == 0) {
                return false;
            }
        }
        return true;
    }
}

/**
 * üñ®Ô∏è –ü–†–ò–ù–¢–ï–†
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É –º–µ—Ç–æ–¥–æ–≤
 */
class Printer {
    
    // –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã print - –æ–¥–Ω–æ –∏–º—è, —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    
    void print(String text) {
        System.out.println("üìÑ " + text);
    }
    
    void print(String text, boolean important) {
        if (important) {
            System.out.println("‚ö†Ô∏è –í–ê–ñ–ù–û: " + text.toUpperCase());
        } else {
            System.out.println("üìÑ " + text);
        }
    }
    
    void print(String text, String level) {
        String prefix = switch (level.toUpperCase()) {
            case "ERROR" -> "‚ùå –û–®–ò–ë–ö–ê: ";
            case "WARNING" -> "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: ";
            case "INFO" -> "‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø: ";
            default -> "üìÑ ";
        };
        System.out.println(prefix + text);
    }
    
    void print(int number) {
        System.out.println("üî¢ –ß–∏—Å–ª–æ: " + number);
    }
    
    void print(double number) {
        System.out.printf("üî¢ –î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ: %.2f%n", number);
    }
    
    void print(String[] lines) {
        System.out.println("üìã –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫:");
        for (int i = 0; i < lines.length; i++) {
            System.out.printf("  %d. %s%n", i + 1, lines[i]);
        }
    }
}

/**
 * üî§ –°–¢–†–û–ö–û–í–´–ï –£–¢–ò–õ–ò–¢–´
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
 */
class StringUtils {
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã - –≤—ã–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–º—è –∫–ª–∞—Å—Å–∞
    
    static String formatName(String firstName, String lastName) {
        String formattedFirst = firstName.trim().toLowerCase();
        String formattedLast = lastName.trim().toLowerCase();
        
        // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
        formattedFirst = formattedFirst.substring(0, 1).toUpperCase() + 
                        formattedFirst.substring(1);
        formattedLast = formattedLast.substring(0, 1).toUpperCase() + 
                       formattedLast.substring(1);
        
        return formattedFirst + " " + formattedLast;
    }
    
    static boolean isValidEmail(String email) {
        return email != null && 
               email.contains("@") && 
               email.contains(".") &&
               email.length() > 5;
    }
    
    static String generatePassword(int length) {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder password = new StringBuilder();
        
        for (int i = 0; i < length; i++) {
            int index = (int) (Math.random() * chars.length());
            password.append(chars.charAt(index));
        }
        
        return password.toString();
    }
}

/**
 * üó°Ô∏è –ò–ì–†–û–í–û–ô –ü–ï–†–°–û–ù–ê–ñ
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤
 */
class GameCharacter {
    private String name;
    private int level;
    private int health;
    private int maxHealth;
    private int mana;
    private int maxMana;
    
    // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
    public void setName(String name) {
        this.name = name;
    }
    
    public void setLevel(int level) {
        this.level = level;
        this.maxHealth = 100 + (level - 1) * 20;
        this.maxMana = 50 + (level - 1) * 10;
    }
    
    public void setHealth(int health) {
        this.health = Math.min(health, maxHealth);
    }
    
    public void setMana(int mana) {
        this.mana = Math.min(mana, maxMana);
    }
    
    public String getName() { return name; }
    public int getLevel() { return level; }
    public int getHealth() { return health; }
    public int getMana() { return mana; }
    
    // –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    public void attack(String target) {
        if (!canFight()) {
            System.out.println("‚ùå " + name + " —Å–ª–∏—à–∫–æ–º —Å–ª–∞–± –¥–ª—è –∞—Ç–∞–∫–∏!");
            return;
        }
        
        int damage = calculateDamage();
        System.out.printf("‚öîÔ∏è %s –∞—Ç–∞–∫—É–µ—Ç %s –∏ –Ω–∞–Ω–æ—Å–∏—Ç %d —É—Ä–æ–Ω–∞!%n", name, target, damage);
        
        // –ê—Ç–∞–∫–∞ —Ç—Ä–∞—Ç–∏—Ç –Ω–µ–º–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        takeDamage(5);
    }
    
    public void castSpell(String spellName, int manaCost) {
        if (mana < manaCost) {
            System.out.println("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è " + spellName);
            return;
        }
        
        mana -= manaCost;
        
        switch (spellName.toLowerCase()) {
            case "–∏—Å—Ü–µ–ª–µ–Ω–∏–µ" -> {
                int healing = 30;
                heal(healing);
                System.out.printf("‚ú® %s –∏—Å–ø–æ–ª—å–∑—É–µ—Ç %s –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç %d –∑–¥–æ—Ä–æ–≤—å—è%n", 
                                name, spellName, healing);
            }
            case "–æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä" -> {
                int damage = 50;
                System.out.printf("üî• %s –±—Ä–æ—Å–∞–µ—Ç %s –∏ –Ω–∞–Ω–æ—Å–∏—Ç %d —É—Ä–æ–Ω–∞!%n", 
                                name, spellName, damage);
            }
            default -> System.out.println("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: " + spellName);
        }
    }
    
    public void rest() {
        System.out.println("üò¥ " + name + " –æ—Ç–¥—ã—Ö–∞–µ—Ç...");
        heal(20);
        restoreMana(15);
        System.out.println("üíö –ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–∞–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    }
    
    public void levelUp() {
        level++;
        int oldMaxHealth = maxHealth;
        int oldMaxMana = maxMana;
        
        setLevel(level);
        health = maxHealth; // –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        mana = maxMana;
        
        System.out.printf("üéâ %s –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –¥–æ %d!%n", name, level);
        System.out.printf("üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: %d -> %d%n", oldMaxHealth, maxHealth);
        System.out.printf("üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞–Ω–∞: %d -> %d%n", oldMaxMana, maxMana);
    }
    
    public void displayStatus() {
        System.out.println("==================");
        System.out.printf("üó°Ô∏è %s (–£—Ä–æ–≤–µ–Ω—å %d)%n", name, level);
        System.out.printf("‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: %d/%d%n", health, maxHealth);
        System.out.printf("üíô –ú–∞–Ω–∞: %d/%d%n", mana, maxMana);
        System.out.println("==================");
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private int calculateDamage() {
        int baseDamage = 10 + level * 5;
        int randomBonus = (int) (Math.random() * 10);
        return baseDamage + randomBonus;
    }
    
    private void takeDamage(int damage) {
        health = Math.max(0, health - damage);
    }
    
    private void heal(int amount) {
        health = Math.min(maxHealth, health + amount);
    }
    
    private void restoreMana(int amount) {
        mana = Math.min(maxMana, mana + amount);
    }
    
    public boolean canFight() {
        return health > 20; // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 20 –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –±–æ—è
    }
}

/*
üéì –ß–¢–û –¢–´ –ò–ó–£–ß–ò–õ:

‚úÖ –ê–Ω–∞—Ç–æ–º–∏—è –º–µ—Ç–æ–¥–∞ (—Å–∏–≥–Ω–∞—Ç—É—Ä–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–æ–∑–≤—Ä–∞—Ç)
‚úÖ –ú–µ—Ç–æ–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –±–µ–∑
‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
‚úÖ –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–¥–æ–≤ (overloading)
‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã (static)
‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (varargs)
‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

üî• –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ù–¶–ï–ü–¶–ò–ò:

üí° –ú–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
üí° –°–∏–≥–Ω–∞—Ç—É—Ä–∞ = –∏–º—è + —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
üí° –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–Ω–æ –∏–º—è, —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
üí° static –º–µ—Ç–æ–¥—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫–ª–∞—Å—Å—É, –Ω–µ –æ–±—ä–µ–∫—Ç—É
üí° varargs –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
üí° private –º–µ—Ç–æ–¥—ã —Å–∫—Ä—ã–≤–∞—é—Ç –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

üèÜ –ü–†–ò–ù–¶–ò–ü–´ –î–ò–ó–ê–ô–ù–ê –ú–ï–¢–û–î–û–í:

- –û–¥–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å (SRP)
- –ü–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ (clean code)
- –ú–∏–Ω–∏–º—É–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏

üíæ –°–æ—Ö—Ä–∞–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å:
git add .
git commit -m "–£—Ä–æ–∫ 8: –ú–µ—Ç–æ–¥—ã –≤ –¥–µ—Ç–∞–ª—è—Ö"

–ì–æ—Ç–æ–≤ –∏–∑—É—á–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã? üèóÔ∏è
*/ 