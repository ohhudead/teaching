package org.example.lessons.week03;

import java.util.Scanner;

/**
 * üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ù–Ø–¢–ò–ï: –ù–ï–î–ï–õ–Ø 3
 * 
 * –í—Ä–µ–º—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è –û–û–ü –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ! –°–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω–∏-–ø—Ä–æ–µ–∫—Ç–æ–≤,
 * –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –∫–ª–∞—Å—Å—ã, –æ–±—ä–µ–∫—Ç—ã, –º–µ—Ç–æ–¥—ã –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –≤ –¥–µ–π—Å—Ç–≤–∏–∏.
 * 
 * üöÄ –ü—Ä–æ–µ–∫—Ç—ã:
 * 1. –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
 * 2. –ò–≥—Ä–∞ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü"
 * 3. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞
 * 4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
 */
public class Week03_Practice {
    
    public static void main(String[] args) {
        System.out.println("üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ù–Ø–¢–ò–ï: –û–û–ü –í –î–ï–ô–°–¢–í–ò–ò\n");
        
        runLibrarySystem();
        runVirtualPetGame();
        runBankingSystem();
        runTaskManager();
        
        System.out.println("\nüèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ—Å–≤–æ–∏–ª–∏ –æ—Å–Ω–æ–≤—ã –û–û–ü!");
        System.out.println("üî• –¢–µ–ø–µ—Ä—å –≤—ã —É–º–µ–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∞—Å—Å—ã, –æ–±—ä–µ–∫—Ç—ã –∏ –ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥—ã!");
    }
    
    /**
     * üìö –ü–†–û–ï–ö–¢ 1: –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ò–ë–õ–ò–û–¢–ï–ö–û–ô
     */
    private static void runLibrarySystem() {
        System.out.println("üìö –ü–†–û–ï–ö–¢ 1: –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ò–ë–õ–ò–û–¢–ï–ö–û–ô");
        System.out.println("=".repeat(50));
        
        // –°–æ–∑–¥–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        Library library = new Library("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –≥–æ—Ä–æ–¥—Å–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥–∏
        library.addBook(new LibraryBook("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", 1225));
        library.addBook(new LibraryBook("1984", "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª", 328));
        library.addBook(new LibraryBook("–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤", 470));
        
        // –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞—Ç–µ–ª–µ–π
        Reader reader1 = new Reader("–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", "R001");
        Reader reader2 = new Reader("–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤", "R002");
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
        library.displayAllBooks();
        
        // –í—ã–¥–∞—á–∞ –∫–Ω–∏–≥
        library.borrowBook("1984", reader1);
        library.borrowBook("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", reader2);
        library.borrowBook("1984", reader2); // –ö–Ω–∏–≥–∞ —É–∂–µ –≤—ã–¥–∞–Ω–∞
        
        System.out.println();
        reader1.displayBorrowedBooks();
        reader2.displayBorrowedBooks();
        
        // –í–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥–∏
        library.returnBook("1984", reader1);
        
        System.out.println("\n" + "=".repeat(50) + "\n");
    }
    
    /**
     * üê± –ü–†–û–ï–ö–¢ 2: –ò–ì–†–ê "–í–ò–†–¢–£–ê–õ–¨–ù–´–ô –ü–ò–¢–û–ú–ï–¶"
     */
    private static void runVirtualPetGame() {
        System.out.println("üê± –ü–†–û–ï–ö–¢ 2: –ò–ì–†–ê \"–í–ò–†–¢–£–ê–õ–¨–ù–´–ô –ü–ò–¢–û–ú–ï–¶\"");
        System.out.println("=".repeat(50));
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
        VirtualPet cat = new VirtualPet("–ú—É—Ä–∑–∏–∫", "–ö–æ—Ç");
        VirtualPet dog = new VirtualPet("–ë–æ–±–∏–∫", "–°–æ–±–∞–∫–∞");
        VirtualPet hamster = new VirtualPet("–•–æ–º—è–∫", "–•–æ–º—è–∫");
        
        System.out.println("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É \"–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü\"!");
        System.out.println("–£ –≤–∞—Å –µ—Å—Ç—å —Ç—Ä–∏ –ø–∏—Ç–æ–º—Ü–∞:\n");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤
        cat.displayStatus();
        dog.displayStatus();
        hamster.displayStatus();
        
        System.out.println("\n‚è∞ –ü—Ä–æ—à–µ–ª –¥–µ–Ω—å...\n");
        
        // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏
        cat.feed();
        cat.play();
        
        dog.feed();
        dog.play();
        dog.sleep();
        
        hamster.feed();
        
        System.out.println("\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è:");
        cat.displayStatus();
        dog.displayStatus();
        hamster.displayStatus();
        
        System.out.println("\n" + "=".repeat(50) + "\n");
    }
    
    /**
     * üè¶ –ü–†–û–ï–ö–¢ 3: –ë–ê–ù–ö–û–í–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê
     */
    private static void runBankingSystem() {
        System.out.println("üè¶ –ü–†–û–ï–ö–¢ 3: –ë–ê–ù–ö–û–í–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê");
        System.out.println("=".repeat(50));
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–Ω–∫
        Bank bank = new Bank("–ù–∞—Ä–æ–¥–Ω—ã–π –ë–∞–Ω–∫");
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        BankCustomer customer1 = new BankCustomer("–ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "123456789");
        BankCustomer customer2 = new BankCustomer("–î–º–∏—Ç—Ä–∏–π –ü–µ—Ç—Ä–æ–≤", "987654321");
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—á–µ—Ç–∞
        BankingAccount account1 = bank.openAccount(customer1, "–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π", 5000);
        BankingAccount account2 = bank.openAccount(customer2, "–¢–µ–∫—É—â–∏–π", 10000);
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        System.out.println("\nüí∞ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:");
        account1.deposit(2000);
        account1.withdraw(1500);
        
        account2.deposit(500);
        account2.withdraw(15000); // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
        
        // –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏
        bank.transferMoney(account1, account2, 1000);
        
        // –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
        System.out.println("\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã:");
        account1.displayAccountInfo();
        account2.displayAccountInfo();
        
        System.out.println("\n" + "=".repeat(50) + "\n");
    }
    
    /**
     * ‚úÖ –ü–†–û–ï–ö–¢ 4: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ê–ú–ò
     */
    private static void runTaskManager() {
        System.out.println("‚úÖ –ü–†–û–ï–ö–¢ 4: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ê–ú–ò");
        System.out.println("=".repeat(50));
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        Project project = new Project("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        project.addTask(new Task("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π", 3));
        project.addTask(new Task("–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", "—Å—Ä–µ–¥–Ω–∏–π", 5));
        project.addTask(new Task("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–≤—ã—Å–æ–∫–∏–π", 10));
        project.addTask(new Task("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å—Ä–µ–¥–Ω–∏–π", 4));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞
        project.displayProjectInfo();
        
        // –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∑–∞–¥–∞—á–∞–º–∏
        System.out.println("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º!");
        
        project.startTask("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π");
        project.completeTask("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π");
        
        project.startTask("–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞");
        project.startTask("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        System.out.println("\nüìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:");
        project.displayProjectInfo();
        
        System.out.println("\n" + "=".repeat(50) + "\n");
    }
}

// ================================
// –ö–õ–ê–°–°–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ë–ò–ë–õ–ò–û–¢–ï–ö–ò
// ================================

/**
 * üìñ –ö–ù–ò–ì–ê –í –ë–ò–ë–õ–ò–û–¢–ï–ö–ï
 */
class LibraryBook {
    private String title;
    private String author;
    private int pages;
    private boolean isAvailable;
    private String borrowedBy;
    
    public LibraryBook(String title, String author, int pages) {
        this.title = title;
        this.author = author;
        this.pages = pages;
        this.isAvailable = true;
        this.borrowedBy = null;
    }
    
    public void borrowBook(String readerName) {
        if (isAvailable) {
            isAvailable = false;
            borrowedBy = readerName;
            System.out.printf("üìö –ö–Ω–∏–≥–∞ \"%s\" –≤—ã–¥–∞–Ω–∞ —á–∏—Ç–∞—Ç–µ–ª—é %s%n", title, readerName);
        } else {
            System.out.printf("‚ùå –ö–Ω–∏–≥–∞ \"%s\" —É–∂–µ –≤—ã–¥–∞–Ω–∞ —á–∏—Ç–∞—Ç–µ–ª—é %s%n", title, borrowedBy);
        }
    }
    
    public void returnBook() {
        if (!isAvailable) {
            System.out.printf("üìö –ö–Ω–∏–≥–∞ \"%s\" –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–º %s%n", title, borrowedBy);
            isAvailable = true;
            borrowedBy = null;
        } else {
            System.out.printf("‚ö†Ô∏è –ö–Ω–∏–≥–∞ \"%s\" –Ω–µ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞%n", title);
        }
    }
    
    public void displayInfo() {
        String status = isAvailable ? "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" : "‚ùå –í—ã–¥–∞–Ω–∞ (" + borrowedBy + ")";
        System.out.printf("üìñ \"%s\" - %s (%d —Å—Ç—Ä.) - %s%n", title, author, pages, status);
    }
    
    // –ì–µ—Ç—Ç–µ—Ä—ã
    public String getTitle() { return title; }
    public boolean isAvailable() { return isAvailable; }
    public String getBorrowedBy() { return borrowedBy; }
}

/**
 * üë§ –ß–ò–¢–ê–¢–ï–õ–¨
 */
class Reader {
    private String name;
    private String readerId;
    private LibraryBook[] borrowedBooks;
    private int borrowedCount;
    
    public Reader(String name, String readerId) {
        this.name = name;
        this.readerId = readerId;
        this.borrowedBooks = new LibraryBook[5]; // –ú–∞–∫—Å–∏–º—É–º 5 –∫–Ω–∏–≥
        this.borrowedCount = 0;
    }
    
    public void borrowBook(LibraryBook book) {
        if (borrowedCount < borrowedBooks.length) {
            borrowedBooks[borrowedCount] = book;
            borrowedCount++;
        }
    }
    
    public void returnBook(LibraryBook book) {
        for (int i = 0; i < borrowedCount; i++) {
            if (borrowedBooks[i] == book) {
                // –°–¥–≤–∏–≥–∞–µ–º –º–∞—Å—Å–∏–≤
                for (int j = i; j < borrowedCount - 1; j++) {
                    borrowedBooks[j] = borrowedBooks[j + 1];
                }
                borrowedCount--;
                borrowedBooks[borrowedCount] = null;
                break;
            }
        }
    }
    
    public void displayBorrowedBooks() {
        System.out.printf("üìã –ß–∏—Ç–∞—Ç–µ–ª—å %s (ID: %s) –≤–∑—è–ª –∫–Ω–∏–≥: %d%n", name, readerId, borrowedCount);
        for (int i = 0; i < borrowedCount; i++) {
            System.out.printf("  %d. %s%n", i + 1, borrowedBooks[i].getTitle());
        }
    }
    
    public String getName() { return name; }
}

/**
 * üèõÔ∏è –ë–ò–ë–õ–ò–û–¢–ï–ö–ê
 */
class Library {
    private String name;
    private LibraryBook[] books;
    private int bookCount;
    
    public Library(String name) {
        this.name = name;
        this.books = new LibraryBook[100]; // –ú–∞–∫—Å–∏–º—É–º 100 –∫–Ω–∏–≥
        this.bookCount = 0;
    }
    
    public void addBook(LibraryBook book) {
        if (bookCount < books.length) {
            books[bookCount] = book;
            bookCount++;
            System.out.printf("‚úÖ –ö–Ω–∏–≥–∞ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É%n", book.getTitle());
        }
    }
    
    public void borrowBook(String title, Reader reader) {
        LibraryBook book = findBook(title);
        if (book != null && book.isAvailable()) {
            book.borrowBook(reader.getName());
            reader.borrowBook(book);
        } else if (book != null) {
            System.out.printf("‚ùå –ö–Ω–∏–≥–∞ \"%s\" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞%n", title);
        } else {
            System.out.printf("‚ùå –ö–Ω–∏–≥–∞ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞%n", title);
        }
    }
    
    public void returnBook(String title, Reader reader) {
        LibraryBook book = findBook(title);
        if (book != null && !book.isAvailable()) {
            book.returnBook();
            reader.returnBook(book);
        }
    }
    
    private LibraryBook findBook(String title) {
        for (int i = 0; i < bookCount; i++) {
            if (books[i].getTitle().equalsIgnoreCase(title)) {
                return books[i];
            }
        }
        return null;
    }
    
    public void displayAllBooks() {
        System.out.printf("üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ \"%s\" - –≤—Å–µ–≥–æ –∫–Ω–∏–≥: %d%n", name, bookCount);
        for (int i = 0; i < bookCount; i++) {
            books[i].displayInfo();
        }
        System.out.println();
    }
}

// ================================
// –ö–õ–ê–°–°–´ –î–õ–Ø –í–ò–†–¢–£–ê–õ–¨–ù–û–ì–û –ü–ò–¢–û–ú–¶–ê
// ================================

/**
 * üêæ –í–ò–†–¢–£–ê–õ–¨–ù–´–ô –ü–ò–¢–û–ú–ï–¶
 */
class VirtualPet {
    private String name;
    private String species;
    private int hunger; // 0-100
    private int happiness; // 0-100
    private int energy; // 0-100
    private int age;
    
    public VirtualPet(String name, String species) {
        this.name = name;
        this.species = species;
        this.hunger = 50;
        this.happiness = 50;
        this.energy = 100;
        this.age = 0;
        
        System.out.printf("üêæ –ü–∏—Ç–æ–º–µ—Ü %s (%s) –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ —Å–≤–µ—Ç!%n", name, species);
    }
    
    public void feed() {
        if (hunger > 20) {
            hunger = Math.max(0, hunger - 30);
            happiness = Math.min(100, happiness + 10);
            System.out.printf("üçñ %s –ø–æ–∫—É—à–∞–ª! –ì–æ–ª–æ–¥: %d, –°—á–∞—Å—Ç—å–µ: %d%n", name, hunger, happiness);
        } else {
            System.out.printf("üòä %s –Ω–µ –≥–æ–ª–æ–¥–µ–Ω%n", name);
        }
    }
    
    public void play() {
        if (energy > 20) {
            energy = Math.max(0, energy - 20);
            happiness = Math.min(100, happiness + 25);
            hunger = Math.min(100, hunger + 15);
            System.out.printf("üéæ %s –ø–æ–∏–≥—Ä–∞–ª! –≠–Ω–µ—Ä–≥–∏—è: %d, –°—á–∞—Å—Ç—å–µ: %d%n", name, energy, happiness);
        } else {
            System.out.printf("üò¥ %s —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è –∏–≥—Ä%n", name);
        }
    }
    
    public void sleep() {
        energy = Math.min(100, energy + 40);
        hunger = Math.min(100, hunger + 10);
        System.out.printf("üò¥ %s –ø–æ—Å–ø–∞–ª! –≠–Ω–µ—Ä–≥–∏—è: %d%n", name, energy);
    }
    
    public void displayStatus() {
        System.out.printf("üêæ %s (%s) - –í–æ–∑—Ä–∞—Å—Ç: %d%n", name, species, age);
        System.out.printf("   üçñ –ì–æ–ª–æ–¥: %d | üòä –°—á–∞—Å—Ç—å–µ: %d | ‚ö° –≠–Ω–µ—Ä–≥–∏—è: %d%n", 
                         hunger, happiness, energy);
        
        String mood = getMood();
        System.out.printf("   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: %s%n%n", mood);
    }
    
    private String getMood() {
        if (happiness > 80) return "üòÑ –û—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤";
        if (happiness > 60) return "üòä –°—á–∞—Å—Ç–ª–∏–≤";
        if (happiness > 40) return "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ";
        if (happiness > 20) return "üòû –ì—Ä—É—Å—Ç–Ω—ã–π";
        return "üò≠ –û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω—ã–π";
    }
}

// ================================
// –ö–õ–ê–°–°–´ –î–õ–Ø –ë–ê–ù–ö–û–í–°–ö–û–ô –°–ò–°–¢–ï–ú–´
// ================================

/**
 * üë§ –ö–õ–ò–ï–ù–¢ –ë–ê–ù–ö–ê
 */
class BankCustomer {
    private String name;
    private String customerId;
    
    public BankCustomer(String name, String customerId) {
        this.name = name;
        this.customerId = customerId;
    }
    
    public String getName() { return name; }
    public String getCustomerId() { return customerId; }
}

/**
 * üí≥ –ë–ê–ù–ö–û–í–°–ö–ò–ô –°–ß–ï–¢
 */
class BankingAccount {
    private String accountNumber;
    private BankCustomer owner;
    private String accountType;
    private double balance;
    private int transactionCount;
    
    public BankingAccount(String accountNumber, BankCustomer owner, String accountType, double initialBalance) {
        this.accountNumber = accountNumber;
        this.owner = owner;
        this.accountType = accountType;
        this.balance = initialBalance;
        this.transactionCount = 0;
        
        System.out.printf("‚úÖ –û—Ç–∫—Ä—ã—Ç %s —Å—á–µ—Ç %s –¥–ª—è %s —Å –±–∞–ª–∞–Ω—Å–æ–º %.2f —Ä—É–±%n", 
                         accountType.toLowerCase(), accountNumber, owner.getName(), initialBalance);
    }
    
    public boolean deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            transactionCount++;
            System.out.printf("üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ %s –Ω–∞ %.2f —Ä—É–±. –ë–∞–ª–∞–Ω—Å: %.2f —Ä—É–±%n", 
                             accountNumber, amount, balance);
            return true;
        }
        return false;
    }
    
    public boolean withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            transactionCount++;
            System.out.printf("üí∏ –°–Ω—è—Ç–∏–µ —Å–æ —Å—á–µ—Ç–∞ %s: %.2f —Ä—É–±. –ë–∞–ª–∞–Ω—Å: %.2f —Ä—É–±%n", 
                             accountNumber, amount, balance);
            return true;
        } else {
            System.out.printf("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ %s –¥–ª—è —Å–Ω—è—Ç–∏—è %.2f —Ä—É–±%n", 
                             accountNumber, amount);
            return false;
        }
    }
    
    public void displayAccountInfo() {
        System.out.printf("üí≥ –°—á–µ—Ç: %s | –í–ª–∞–¥–µ–ª–µ—Ü: %s | –¢–∏–ø: %s%n", 
                         accountNumber, owner.getName(), accountType);
        System.out.printf("   üí∞ –ë–∞–ª–∞–Ω—Å: %.2f —Ä—É–± | üìä –û–ø–µ—Ä–∞—Ü–∏–π: %d%n", 
                         balance, transactionCount);
    }
    
    public double getBalance() { return balance; }
    public String getAccountNumber() { return accountNumber; }
    public BankCustomer getOwner() { return owner; }
}

/**
 * üè¶ –ë–ê–ù–ö
 */
class Bank {
    private String name;
    private BankingAccount[] accounts;
    private int accountCount;
    
    public Bank(String name) {
        this.name = name;
        this.accounts = new BankingAccount[100];
        this.accountCount = 0;
    }
    
    public BankingAccount openAccount(BankCustomer customer, String accountType, double initialBalance) {
        String accountNumber = generateAccountNumber();
        BankingAccount account = new BankingAccount(accountNumber, customer, accountType, initialBalance);
        
        if (accountCount < accounts.length) {
            accounts[accountCount] = account;
            accountCount++;
        }
        
        return account;
    }
    
    public boolean transferMoney(BankingAccount fromAccount, BankingAccount toAccount, double amount) {
        if (fromAccount.withdraw(amount)) {
            toAccount.deposit(amount);
            System.out.printf("üí± –ü–µ—Ä–µ–≤–æ–¥ %.2f —Ä—É–± —Å–æ —Å—á–µ—Ç–∞ %s –Ω–∞ —Å—á–µ—Ç %s –≤—ã–ø–æ–ª–Ω–µ–Ω%n", 
                             amount, fromAccount.getAccountNumber(), toAccount.getAccountNumber());
            return true;
        } else {
            System.out.printf("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤%n");
            return false;
        }
    }
    
    private String generateAccountNumber() {
        return String.format("ACC-%05d", accountCount + 1);
    }
}

// ================================
// –ö–õ–ê–°–°–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ê–ú–ò
// ================================

/**
 * ‚úÖ –ó–ê–î–ê–ß–ê
 */
class Task {
    private String name;
    private String priority; // –≤—ã—Å–æ–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –Ω–∏–∑–∫–∏–π
    private int estimatedDays;
    private String status; // –Ω–æ–≤–∞—è, –≤ —Ä–∞–±–æ—Ç–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    
    public Task(String name, String priority, int estimatedDays) {
        this.name = name;
        this.priority = priority;
        this.estimatedDays = estimatedDays;
        this.status = "–Ω–æ–≤–∞—è";
    }
    
    public void startTask() {
        if ("–Ω–æ–≤–∞—è".equals(status)) {
            status = "–≤ —Ä–∞–±–æ—Ç–µ";
            System.out.printf("üöÄ –ó–∞–¥–∞—á–∞ \"%s\" –Ω–∞—á–∞—Ç–∞%n", name);
        } else {
            System.out.printf("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ \"%s\" —É–∂–µ %s%n", name, status);
        }
    }
    
    public void completeTask() {
        if (!"–∑–∞–≤–µ—Ä—à–µ–Ω–∞".equals(status)) {
            status = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞";
            System.out.printf("‚úÖ –ó–∞–¥–∞—á–∞ \"%s\" –∑–∞–≤–µ—Ä—à–µ–Ω–∞%n", name);
        } else {
            System.out.printf("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ \"%s\" —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞%n", name);
        }
    }
    
    public void displayTaskInfo() {
        String priorityIcon = switch (priority.toLowerCase()) {
            case "–≤—ã—Å–æ–∫–∏–π" -> "üî¥";
            case "—Å—Ä–µ–¥–Ω–∏–π" -> "üü°";
            case "–Ω–∏–∑–∫–∏–π" -> "üü¢";
            default -> "‚ö™";
        };
        
        String statusIcon = switch (status) {
            case "–Ω–æ–≤–∞—è" -> "üìã";
            case "–≤ —Ä–∞–±–æ—Ç–µ" -> "‚è≥";
            case "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" -> "‚úÖ";
            default -> "‚ùì";
        };
        
        System.out.printf("  %s %s \"%s\" - %s –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (%d –¥–Ω–µ–π) - %s%n", 
                         statusIcon, priorityIcon, name, priority, estimatedDays, status);
    }
    
    public String getName() { return name; }
    public String getStatus() { return status; }
    public int getEstimatedDays() { return estimatedDays; }
}

/**
 * üìä –ü–†–û–ï–ö–¢
 */
class Project {
    private String name;
    private Task[] tasks;
    private int taskCount;
    
    public Project(String name) {
        this.name = name;
        this.tasks = new Task[20];
        this.taskCount = 0;
    }
    
    public void addTask(Task task) {
        if (taskCount < tasks.length) {
            tasks[taskCount] = task;
            taskCount++;
            System.out.printf("‚ûï –ó–∞–¥–∞—á–∞ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç%n", task.getName());
        }
    }
    
    public void startTask(String taskName) {
        Task task = findTask(taskName);
        if (task != null) {
            task.startTask();
        } else {
            System.out.printf("‚ùå –ó–∞–¥–∞—á–∞ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞%n", taskName);
        }
    }
    
    public void completeTask(String taskName) {
        Task task = findTask(taskName);
        if (task != null) {
            task.completeTask();
        } else {
            System.out.printf("‚ùå –ó–∞–¥–∞—á–∞ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞%n", taskName);
        }
    }
    
    private Task findTask(String taskName) {
        for (int i = 0; i < taskCount; i++) {
            if (tasks[i].getName().equalsIgnoreCase(taskName)) {
                return tasks[i];
            }
        }
        return null;
    }
    
    public void displayProjectInfo() {
        System.out.printf("üìä –ü—Ä–æ–µ–∫—Ç: \"%s\"%n", name);
        System.out.printf("üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: %d%n", taskCount);
        
        int newTasks = 0, inProgress = 0, completed = 0, totalDays = 0;
        
        for (int i = 0; i < taskCount; i++) {
            Task task = tasks[i];
            switch (task.getStatus()) {
                case "–Ω–æ–≤–∞—è" -> newTasks++;
                case "–≤ —Ä–∞–±–æ—Ç–µ" -> inProgress++;
                case "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" -> completed++;
            }
            totalDays += task.getEstimatedDays();
            task.displayTaskInfo();
        }
        
        System.out.printf("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: üìã –ù–æ–≤—ã—Ö: %d | ‚è≥ –í —Ä–∞–±–æ—Ç–µ: %d | ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: %d%n", 
                         newTasks, inProgress, completed);
        System.out.printf("‚è±Ô∏è –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: %d –¥–Ω–µ–π%n", totalDays);
        
        double progress = taskCount > 0 ? (double) completed / taskCount * 100 : 0;
        System.out.printf("üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞: %.1f%%%n", progress);
    }
}

/*
üéì –ß–¢–û –¢–´ –°–û–ó–î–ê–õ:

‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π (–∫–ª–∞—Å—Å—ã, –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è)
‚úÖ –ò–≥—Ä–∞ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü" (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ (–≤–∞–ª–∏–¥–∞—Ü–∏—è, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ (–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤)

üî• –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ï –ö–û–ù–¶–ï–ü–¶–ò–ò –û–û–ü:

üí° –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è - –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–æ–≤
üí° –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è - —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–∫—Ä—ã—Ç–∞ –∑–∞ –ø—Ä–æ—Å—Ç—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
üí° –ö–æ–º–ø–æ–∑–∏—Ü–∏—è - –æ–±—ä–µ–∫—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –¥—Ä—É–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã
üí° –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤

üèÜ –ù–ê–í–´–ö–ò –†–ê–ó–†–ê–ë–û–¢–ö–ò:

- –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ —Å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
- –ù–∞–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏

üíæ –°–æ—Ö—Ä–∞–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å:
git add .
git commit -m "–ù–µ–¥–µ–ª—è 3: –ü—Ä–∞–∫—Ç–∏–∫–∞ –û–û–ü - 4 –ø—Ä–æ–µ–∫—Ç–∞"

–¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–∑—É—á–µ–Ω–∏—é –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è! üöÄ
*/ 