package org.example.lessons.week04;

/**
 * üß¨ –ó–ê–ù–Ø–¢–ò–ï 10: –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–ï
 * 
 * –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –º–æ—â–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –û–û–ü, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
 * –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö. –ö–∞–∫ –¥–µ—Ç–∏ –Ω–∞—Å–ª–µ–¥—É—é—Ç —á–µ—Ä—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π, —Ç–∞–∫ –∏ –∫–ª–∞—Å—Å—ã –º–æ–≥—É—Ç
 * –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–æ–ª—è –∏ –º–µ—Ç–æ–¥—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤.
 * 
 * üí° –ñ–∞—Ä–≥–æ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
 * - Inheritance (–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ) - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥—Ä—É–≥–æ–≥–æ
 * - Parent/Base/Super class (–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π/–±–∞–∑–æ–≤—ã–π/—Å—É–ø–µ—Ä –∫–ª–∞—Å—Å) - –∫–ª–∞—Å—Å-–¥–æ–Ω–æ—Ä
 * - Child/Derived/Sub class (–î–æ—á–µ—Ä–Ω–∏–π/–ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π/–ø–æ–¥ –∫–ª–∞—Å—Å) - –∫–ª–∞—Å—Å-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫
 * - extends (—Ä–∞—Å—à–∏—Ä—è–µ—Ç) - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 * - super - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å
 * - Override (–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ) - –∑–∞–º–µ–Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞
 * - IS-A relationship (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ "—è–≤–ª—è–µ—Ç—Å—è") - –æ—Å–Ω–æ–≤–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 */
public class Lesson10_Inheritance {
    
    public static void main(String[] args) {
        System.out.println("üß¨ –ò–ó–£–ß–ê–ï–ú –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–ï\n");
        
        learnBasicInheritance();
        learnMethodOverriding();
        learnSuperKeyword();
        learnInheritanceHierarchy();
        practiceInheritance();
    }
    
    /**
     * üå≥ –ë–ê–ó–û–í–û–ï –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–ï
     */
    private static void learnBasicInheritance() {
        System.out.println("üå≥ –ë–∞–∑–æ–≤–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:");
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        Animal animal = new Animal("–ñ–∏–≤–æ—Ç–Ω–æ–µ", 5);
        Dog dog = new Dog("–†–µ–∫—Å", 3, "–ù–µ–º–µ—Ü–∫–∞—è –æ–≤—á–∞—Ä–∫–∞");
        Cat cat = new Cat("–ú—É—Ä–∫–∞", 2, "–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è");
        
        // –í—Å–µ —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–ª–∏ –º–µ—Ç–æ–¥—ã –æ—Ç Animal
        animal.displayInfo();
        animal.eat();
        animal.sleep();
        
        System.out.println();
        
        dog.displayInfo(); // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        dog.eat();         // –£–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        dog.bark();        // –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ Dog
        
        System.out.println();
        
        cat.displayInfo(); // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        cat.sleep();       // –£–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        cat.purr();        // –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ Cat
        
        System.out.println();
    }
    
    private static void learnMethodOverriding() {
        System.out.println("üîÑ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤:");
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        Vehicle[] vehicles = {
            new Vehicle("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", 50),
            new Car("–ê–≤—Ç–æ–º–æ–±–∏–ª—å", 120, 4),
            new Bicycle("–í–µ–ª–æ—Å–∏–ø–µ–¥", 25, "–ì–æ—Ä–Ω—ã–π")
        };
        
        // –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ç–æ–¥ start() –ø–æ-—Å–≤–æ–µ–º—É
        for (Vehicle vehicle : vehicles) {
            vehicle.displayInfo();
            vehicle.start();     // –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –≤ –¥–µ–π—Å—Ç–≤–∏–∏!
            vehicle.accelerate();
            vehicle.stop();
            System.out.println();
        }
    }
    
    private static void learnSuperKeyword() {
        System.out.println("‚¨ÜÔ∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ super:");
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        Student student = new Student("–ê–Ω–Ω–∞", 20, "S12345", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞");
        student.displayInfo();
        student.study();
        
        System.out.println();
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        Teacher teacher = new Teacher("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á", 45, "T67890", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞");
        teacher.displayInfo();
        teacher.teach();
        
        System.out.println();
    }
    
    private static void learnInheritanceHierarchy() {
        System.out.println("üèóÔ∏è –ò–µ—Ä–∞—Ä—Ö–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:");
        
        // –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: Shape -> Rectangle -> Square
        Shape shape = new Shape("–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ñ–∏–≥—É—Ä–∞");
        Rectangle rectangle = new Rectangle("–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫", 10, 5);
        Square square = new Square("–ö–≤–∞–¥—Ä–∞—Ç", 7);
        
        shape.displayInfo();
        shape.calculateArea(); // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        
        System.out.println();
        
        rectangle.displayInfo();
        rectangle.calculateArea(); // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        rectangle.calculatePerimeter();
        
        System.out.println();
        
        square.displayInfo();
        square.calculateArea(); // –£–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω–∞—è –æ—Ç Rectangle
        square.calculatePerimeter(); // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        
        System.out.println();
    }
    
    private static void practiceInheritance() {
        System.out.println("üéØ –ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:");
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        GameCharacter[] party = {
            new Warrior("–¢–æ—Ä–∏–Ω", 100, 20, "–¢–æ–ø–æ—Ä"),
            new Mage("–ì—ç–Ω–¥–∞–ª—å—Ñ", 80, 150, "–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä"),
            new Archer("–õ–µ–≥–æ–ª–∞—Å", 90, 100, "–≠–ª—å—Ñ–∏–π—Å–∫–∏–π –ª—É–∫")
        };
        
        System.out.println("üè∞ –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –≥–µ—Ä–æ–µ–≤:");
        for (GameCharacter hero : party) {
            hero.displayStats();
            System.out.println();
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –±–æ–π!
        System.out.println("‚öîÔ∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–∏—Ç–≤–∞ —Å –¥—Ä–∞–∫–æ–Ω–æ–º!");
        for (GameCharacter hero : party) {
            hero.attack(); // –ö–∞–∂–¥—ã–π –∞—Ç–∞–∫—É–µ—Ç –ø–æ-—Å–≤–æ–µ–º—É
            hero.useSpecialAbility(); // –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
            System.out.println();
        }
        
        // –û—Ç–¥—ã—Ö –ø–æ—Å–ª–µ –±–æ—è
        System.out.println("üò¥ –ì–µ—Ä–æ–∏ –æ—Ç–¥—ã—Ö–∞—é—Ç...");
        for (GameCharacter hero : party) {
            hero.rest(); // –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö
        }
        
        System.out.println();
    }
}

// ================================
// –ë–ê–ó–û–í–´–ï –ö–õ–ê–°–°–´ –î–õ–Ø –ñ–ò–í–û–¢–ù–´–•
// ================================

/**
 * üêæ –ë–ê–ó–û–í–´–ô –ö–õ–ê–°–° –ñ–ò–í–û–¢–ù–û–ï
 */
class Animal {
    protected String name;  // protected - –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞–º
    protected int age;
    
    public Animal(String name, int age) {
        this.name = name;
        this.age = age;
        System.out.printf("üêæ –°–æ–∑–¥–∞–Ω–æ –∂–∏–≤–æ—Ç–Ω–æ–µ: %s%n", name);
    }
    
    public void displayInfo() {
        System.out.printf("üêæ %s, –≤–æ–∑—Ä–∞—Å—Ç: %d –ª–µ—Ç%n", name, age);
    }
    
    public void eat() {
        System.out.printf("üçñ %s –∫—É—à–∞–µ—Ç%n", name);
    }
    
    public void sleep() {
        System.out.printf("üò¥ %s —Å–ø–∏—Ç%n", name);
    }
    
    public void makeSound() {
        System.out.printf("üîä %s –∏–∑–¥–∞–µ—Ç –∑–≤—É–∫%n", name);
    }
}

/**
 * üêï –°–û–ë–ê–ö–ê - –Ω–∞—Å–ª–µ–¥–Ω–∏–∫ Animal
 */
class Dog extends Animal {
    private String breed;
    
    public Dog(String name, int age, String breed) {
        super(name, age); // –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        this.breed = breed;
        System.out.printf("üêï –°–æ–∑–¥–∞–Ω–∞ —Å–æ–±–∞–∫–∞ –ø–æ—Ä–æ–¥—ã: %s%n", breed);
    }
    
    @Override // –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    public void displayInfo() {
        System.out.printf("üêï –°–æ–±–∞–∫–∞ %s (%s), –≤–æ–∑—Ä–∞—Å—Ç: %d –ª–µ—Ç%n", name, breed, age);
    }
    
    @Override
    public void makeSound() {
        System.out.printf("üêï %s –ª–∞–µ—Ç: –ì–∞–≤-–≥–∞–≤!%n", name);
    }
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–±–∞–∫–∏
    public void bark() {
        makeSound();
    }
    
    public void wagTail() {
        System.out.printf("üêï %s –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–æ–º%n", name);
    }
}

/**
 * üê± –ö–û–®–ö–ê - –Ω–∞—Å–ª–µ–¥–Ω–∏–∫ Animal
 */
class Cat extends Animal {
    private String color;
    
    public Cat(String name, int age, String color) {
        super(name, age);
        this.color = color;
        System.out.printf("üê± –°–æ–∑–¥–∞–Ω–∞ –∫–æ—à–∫–∞ –æ–∫—Ä–∞—Å–∞: %s%n", color);
    }
    
    @Override
    public void displayInfo() {
        System.out.printf("üê± –ö–æ—à–∫–∞ %s (%s), –≤–æ–∑—Ä–∞—Å—Ç: %d –ª–µ—Ç%n", name, color, age);
    }
    
    @Override
    public void makeSound() {
        System.out.printf("üê± %s –º—è—É–∫–∞–µ—Ç: –ú—è—É-–º—è—É!%n", name);
    }
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–æ—à–∫–∏
    public void purr() {
        System.out.printf("üê± %s –º—É—Ä–ª—ã—á–µ—Ç%n", name);
    }
    
    public void hunt() {
        System.out.printf("üê± %s –æ—Ö–æ—Ç–∏—Ç—Å—è –Ω–∞ –º—ã—à–µ–π%n", name);
    }
}

// ================================
// –ö–õ–ê–°–°–´ –¢–†–ê–ù–°–ü–û–†–¢–ê
// ================================

/**
 * üöó –ë–ê–ó–û–í–´–ô –ö–õ–ê–°–° –¢–†–ê–ù–°–ü–û–†–¢
 */
class Vehicle {
    protected String name;
    protected int maxSpeed;
    protected boolean isMoving;
    
    public Vehicle(String name, int maxSpeed) {
        this.name = name;
        this.maxSpeed = maxSpeed;
        this.isMoving = false;
    }
    
    public void displayInfo() {
        System.out.printf("üöó %s (–º–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å: %d –∫–º/—á)%n", name, maxSpeed);
    }
    
    public void start() {
        isMoving = true;
        System.out.printf("üöÄ %s –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ%n", name);
    }
    
    public void stop() {
        isMoving = false;
        System.out.printf("üõë %s –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è%n", name);
    }
    
    public void accelerate() {
        if (isMoving) {
            System.out.printf("‚ö° %s —É—Å–∫–æ—Ä—è–µ—Ç—Å—è%n", name);
        } else {
            System.out.printf("‚ùå %s –Ω–µ –¥–≤–∏–∂–µ—Ç—Å—è%n", name);
        }
    }
}

/**
 * üöô –ê–í–¢–û–ú–û–ë–ò–õ–¨
 */
class Car extends Vehicle {
    private int wheels;
    
    public Car(String name, int maxSpeed, int wheels) {
        super(name, maxSpeed);
        this.wheels = wheels;
    }
    
    @Override
    public void start() {
        System.out.printf("üîë –ó–∞–≤–æ–¥–∏–º –¥–≤–∏–≥–∞—Ç–µ–ª—å %s%n", name);
        super.start(); // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
    }
    
    @Override
    public void accelerate() {
        if (isMoving) {
            System.out.printf("üöó %s —Ä–∞–∑–≥–æ–Ω—è–µ—Ç—Å—è –Ω–∞ %d –∫–æ–ª–µ—Å–∞—Ö%n", name, wheels);
        } else {
            System.out.printf("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ–¥–∏—Ç–µ %s%n", name);
        }
    }
    
    public void honk() {
        System.out.printf("üìØ %s —Å–∏–≥–Ω–∞–ª–∏—Ç: –ë–∏-–±–∏!%n", name);
    }
}

/**
 * üö≤ –í–ï–õ–û–°–ò–ü–ï–î
 */
class Bicycle extends Vehicle {
    private String type;
    
    public Bicycle(String name, int maxSpeed, String type) {
        super(name, maxSpeed);
        this.type = type;
    }
    
    @Override
    public void start() {
        System.out.printf("üö¥ –ù–∞—á–∏–Ω–∞–µ–º –∫—Ä—É—Ç–∏—Ç—å –ø–µ–¥–∞–ª–∏ %s (%s)%n", name, type);
        super.start();
    }
    
    @Override
    public void accelerate() {
        if (isMoving) {
            System.out.printf("üö≤ %s —É—Å–∫–æ—Ä—è–µ—Ç—Å—è —Å–∏–ª–æ–π –Ω–æ–≥%n", name);
        } else {
            System.out.printf("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –ø–µ–¥–∞–ª–∏%n");
        }
    }
    
    public void ringBell() {
        System.out.printf("üîî %s –∑–≤–æ–Ω–∏—Ç –≤ –∑–≤–æ–Ω–æ–∫: –î–∏–Ω—å-–¥–∏–Ω—å!%n", name);
    }
}

// ================================
// –ò–ï–†–ê–†–•–ò–Ø –õ–Æ–î–ï–ô
// ================================

/**
 * üë§ –ë–ê–ó–û–í–´–ô –ö–õ–ê–°–° –ß–ï–õ–û–í–ï–ö
 */
class Person {
    protected String name;
    protected int age;
    
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    public void displayInfo() {
        System.out.printf("üë§ %s, %d –ª–µ—Ç%n", name, age);
    }
    
    public void walk() {
        System.out.printf("üö∂ %s –∏–¥–µ—Ç%n", name);
    }
    
    public void talk() {
        System.out.printf("üí¨ %s –≥–æ–≤–æ—Ä–∏—Ç%n", name);
    }
}

/**
 * üéì –°–¢–£–î–ï–ù–¢
 */
class Student extends Person {
    private String studentId;
    private String major;
    
    public Student(String name, int age, String studentId, String major) {
        super(name, age); // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        this.studentId = studentId;
        this.major = major;
    }
    
    @Override
    public void displayInfo() {
        super.displayInfo(); // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        System.out.printf("   üìö –°—Ç—É–¥–µ–Ω—Ç ID: %s, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: %s%n", studentId, major);
    }
    
    public void study() {
        System.out.printf("üìñ –°—Ç—É–¥–µ–Ω—Ç %s –∏–∑—É—á–∞–µ—Ç %s%n", name, major);
    }
    
    public void takeExam() {
        System.out.printf("‚úçÔ∏è %s —Å–¥–∞–µ—Ç —ç–∫–∑–∞–º–µ–Ω%n", name);
    }
}

/**
 * üë®‚Äçüè´ –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨
 */
class Teacher extends Person {
    private String teacherId;
    private String subject;
    
    public Teacher(String name, int age, String teacherId, String subject) {
        super(name, age);
        this.teacherId = teacherId;
        this.subject = subject;
    }
    
    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.printf("   üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ID: %s, –ø—Ä–µ–¥–º–µ—Ç: %s%n", teacherId, subject);
    }
    
    public void teach() {
        System.out.printf("üéì –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å %s –≤–µ–¥–µ—Ç —É—Ä–æ–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É %s%n", name, subject);
    }
    
    public void gradeStudents() {
        System.out.printf("üìä %s –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤%n", name);
    }
}

// ================================
// –ì–ï–û–ú–ï–¢–†–ò–ß–ï–°–ö–ò–ï –§–ò–ì–£–†–´
// ================================

/**
 * üìê –ë–ê–ó–û–í–´–ô –ö–õ–ê–°–° –§–ò–ì–£–†–ê
 */
class Shape {
    protected String name;
    
    public Shape(String name) {
        this.name = name;
    }
    
    public void displayInfo() {
        System.out.printf("üìê –§–∏–≥—É—Ä–∞: %s%n", name);
    }
    
    public double calculateArea() {
        System.out.printf("üî¢ –ü–ª–æ—â–∞–¥—å —Ñ–∏–≥—É—Ä—ã %s –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞%n", name);
        return 0;
    }
}

/**
 * ‚ñ≠ –ü–†–Ø–ú–û–£–ì–û–õ–¨–ù–ò–ö
 */
class Rectangle extends Shape {
    protected double width;
    protected double height;
    
    public Rectangle(String name, double width, double height) {
        super(name);
        this.width = width;
        this.height = height;
    }
    
    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.printf("   üìè –®–∏—Ä–∏–Ω–∞: %.1f, –í—ã—Å–æ—Ç–∞: %.1f%n", width, height);
    }
    
    @Override
    public double calculateArea() {
        double area = width * height;
        System.out.printf("üî¢ –ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: %.1f%n", area);
        return area;
    }
    
    public double calculatePerimeter() {
        double perimeter = 2 * (width + height);
        System.out.printf("üìè –ü–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: %.1f%n", perimeter);
        return perimeter;
    }
}

/**
 * ‚¨ú –ö–í–ê–î–†–ê–¢
 */
class Square extends Rectangle {
    
    public Square(String name, double side) {
        super(name, side, side); // –£ –∫–≤–∞–¥—Ä–∞—Ç–∞ —à–∏—Ä–∏–Ω–∞ = –≤—ã—Å–æ—Ç–∞
    }
    
    @Override
    public void displayInfo() {
        System.out.printf("üìê –§–∏–≥—É—Ä–∞: %s%n", name);
        System.out.printf("   üìè –°—Ç–æ—Ä–æ–Ω–∞: %.1f%n", width);
    }
    
    @Override
    public double calculatePerimeter() {
        double perimeter = 4 * width;
        System.out.printf("üìè –ü–µ—Ä–∏–º–µ—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞: %.1f%n", perimeter);
        return perimeter;
    }
}

// ================================
// –ò–ì–†–û–í–´–ï –ü–ï–†–°–û–ù–ê–ñ–ò
// ================================

/**
 * üó°Ô∏è –ë–ê–ó–û–í–´–ô –ò–ì–†–û–í–û–ô –ü–ï–†–°–û–ù–ê–ñ
 */
class GameCharacter {
    protected String name;
    protected int health;
    protected int mana;
    
    public GameCharacter(String name, int health, int mana) {
        this.name = name;
        this.health = health;
        this.mana = mana;
    }
    
    public void displayStats() {
        System.out.printf("üó°Ô∏è %s | ‚ù§Ô∏è HP: %d | üíô MP: %d%n", name, health, mana);
    }
    
    public void attack() {
        System.out.printf("‚öîÔ∏è %s –∞—Ç–∞–∫—É–µ—Ç!%n", name);
    }
    
    public void rest() {
        health = Math.min(100, health + 20);
        mana = Math.min(100, mana + 15);
        System.out.printf("üò¥ %s –æ—Ç–¥–æ—Ö–Ω—É–ª. HP: %d, MP: %d%n", name, health, mana);
    }
    
    public void useSpecialAbility() {
        System.out.printf("‚ú® %s –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–æ–±—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å%n", name);
    }
}

/**
 * üõ°Ô∏è –í–û–ò–ù
 */
class Warrior extends GameCharacter {
    private String weapon;
    
    public Warrior(String name, int health, int mana, String weapon) {
        super(name, health, mana);
        this.weapon = weapon;
    }
    
    @Override
    public void displayStats() {
        super.displayStats();
        System.out.printf("   üõ°Ô∏è –ö–ª–∞—Å—Å: –í–æ–∏–Ω | ‚öîÔ∏è –û—Ä—É–∂–∏–µ: %s%n", weapon);
    }
    
    @Override
    public void attack() {
        System.out.printf("‚öîÔ∏è –í–æ–∏–Ω %s –Ω–∞–Ω–æ—Å–∏—Ç –º–æ—â–Ω—ã–π —É–¥–∞—Ä %s!%n", name, weapon);
    }
    
    @Override
    public void useSpecialAbility() {
        System.out.printf("üõ°Ô∏è %s –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ñ–µ–ª–µ–∑–Ω—É—é –∑–∞—â–∏—Ç—É!%n", name);
    }
}

/**
 * üßô‚Äç‚ôÇÔ∏è –ú–ê–ì
 */
class Mage extends GameCharacter {
    private String spell;
    
    public Mage(String name, int health, int mana, String spell) {
        super(name, health, mana);
        this.spell = spell;
    }
    
    @Override
    public void displayStats() {
        super.displayStats();
        System.out.printf("   üßô‚Äç‚ôÇÔ∏è –ö–ª–∞—Å—Å: –ú–∞–≥ | ‚ú® –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: %s%n", spell);
    }
    
    @Override
    public void attack() {
        if (mana >= 20) {
            mana -= 20;
            System.out.printf("‚ú® –ú–∞–≥ %s –∫–∞—Å—Ç—É–µ—Ç %s! MP: %d%n", name, spell, mana);
        } else {
            System.out.printf("‚ùå –£ –º–∞–≥–∞ %s –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã%n", name);
        }
    }
    
    @Override
    public void useSpecialAbility() {
        System.out.printf("üîÆ %s –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–π —â–∏—Ç!%n", name);
    }
}

/**
 * üèπ –õ–£–ß–ù–ò–ö
 */
class Archer extends GameCharacter {
    private String bow;
    
    public Archer(String name, int health, int mana, String bow) {
        super(name, health, mana);
        this.bow = bow;
    }
    
    @Override
    public void displayStats() {
        super.displayStats();
        System.out.printf("   üèπ –ö–ª–∞—Å—Å: –õ—É—á–Ω–∏–∫ | üèπ –õ—É–∫: %s%n", bow);
    }
    
    @Override
    public void attack() {
        System.out.printf("üèπ –õ—É—á–Ω–∏–∫ %s —Å—Ç—Ä–µ–ª—è–µ—Ç –∏–∑ %s!%n", name, bow);
    }
    
    @Override
    public void useSpecialAbility() {
        System.out.printf("üéØ %s –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª!%n", name);
    }
}

/*
üéì –ß–¢–û –¢–´ –ò–ó–£–ß–ò–õ:

‚úÖ –û—Å–Ω–æ–≤—ã –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (extends)
‚úÖ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ (@Override)
‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ super
‚úÖ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
‚úÖ –û—Ç–Ω–æ—à–µ–Ω–∏—è IS-A (—è–≤–ª—è–µ—Ç—Å—è)
‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä protected
‚úÖ –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ

üî• –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ù–¶–ï–ü–¶–ò–ò:

üí° –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ = –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
üí° Child IS-A Parent (–°–æ–±–∞–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ñ–∏–≤–æ—Ç–Ω—ã–º)
üí° super() –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è
üí° @Override –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
üí° protected –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞–º
üí° –û–¥–∏–Ω —Ä–æ–¥–∏—Ç–µ–ª—å, –º–Ω–æ–≥–æ –¥–µ—Ç–µ–π

üèÜ –ü–†–ò–ù–¶–ò–ü–´ –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø:

- DRY (Don't Repeat Yourself) - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è
- –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ IS-A
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π)
- –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
- –ò–µ—Ä–∞—Ä—Ö–∏—è –æ—Ç –æ–±—â–µ–≥–æ –∫ —á–∞—Å—Ç–Ω–æ–º—É

üíæ –°–æ—Ö—Ä–∞–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å:
git add .
git commit -m "–£—Ä–æ–∫ 10: –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"

–ì–æ—Ç–æ–≤ –∏–∑—É—á–∞—Ç—å –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º? üé≠
*/ 